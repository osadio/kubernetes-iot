apiVersion: v1
kind: Service
metadata:
  name: {{ .Kafka.AppName }}-connect-server
  namespace: {{ .Namespace }}
spec:
  ports:
  - port: 8083
  selector:
    app: {{ .Kafka.AppName }}-connect
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Kafka.AppName }}-connect
  namespace: {{ .Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Kafka.AppName }}-connect
  replicas: {{ .Kafka.Replicas }}
  template:
    metadata:
      labels:
        app: {{ .Kafka.AppName }}-connect
    spec:
      volumes:
      - name: configmap
        configMap:
          name: {{ .Kafka.AppName }}-connect-config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .LabelConfig.Service }}
                operator: Exists
      containers:
      - name: kafka-connect
        image: {{ .Kafka.Connect.Image }}
        env:
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: "{{ .Kafka.AppName }}-server:9092" # service name for kafka client
        - name: CONNECT_REST_PORT
          value: "8083"
        - name: CONNECT_GROUP_ID
          value: "kafka-connect-group"
        - name: CONNECT_CONFIG_STORAGE_TOPIC # all topics are created before using Job
          value: "kafka-connect-config"
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: "kafka-connect-offset"
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: "kafka-connect-status"
        - name: CONNECT_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_PLUGIN_PATH
          value: "/usr/share/java"
        command: ['/bin/bash', '/kafka-connect/start-connect.sh']
        volumeMounts:
        - name: configmap
          mountPath: /kafka-connect
        ports:
        - name: rest
          containerPort: 8083
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-ce", "kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done"]
        resources:
          requests:
            cpu: {{ .Kafka.Connect.Resources.CPU }}
            memory: {{ .Kafka.Connect.Resources.Memory }}
        readinessProbe:
          tcpSocket:
            port: 8083
          timeoutSeconds: 2
          initialDelaySeconds: 5
          periodSeconds: 20
