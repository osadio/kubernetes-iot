apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-mqtt-connector
  namespace: titangrm-iot
data:
  create-mqtt-connector.sh: |-
    #!/bin/bash
    if [ -z $MQTT_APP_NAME ]; then
        MQTT_APP_NAME="mqtt"
    fi
    if [ -z $MQTT_SOURCE_TOPICS ]; then
        MQTT_SOURCE_TOPICS="mqtt-data"
    fi
    if [ -z $MQTT_KAFKA_TOPIC ]; then
        MQTT_KAFKA_TOPIC=$MQTT_APP_NAME"-data"
    fi
    if [ -z $MQTT_BROKER_SERVICE ]; then
        MQTT_BROKER_SERVICE="mqtt-broker"
    fi
    if [ -z $MQTT_BROKER_PORT ]; then
        MQTT_BROKER_PORT="1883"
    fi
    if [ -z $MQTT_BROKER_REPLICAS ]; then
        MQTT_BROKER_REPLICAS="1"
    fi
    if [ -z $KAFKA_SERVER ]; then
        KAFKA_SERVER="kafka-server"
    fi
    if [ -z $KAFKA_SERVER_PORT ]; then
        KAFKA_SERVER_PORT="9092"
    fi
    if [ -z $KAFKA_BROKER_REPLICAS ]; then
        KAFKA_BROKER_REPLICAS="3"
    fi
    if [ -z $ZOOKEEPER_SERVER ]; then
        ZOOKEEPER_SERVER="zookeeper-server:2181/iot-default"
    fi
    if [ -z $NAMESPACE ]; then
        NAMESPACE="titangrm-iot"
    fi
    all_ready=1
    while :
    do
        all_ready=1
        for pod in $(seq 0 $((MQTT_BROKER_REPLICAS-1)))
        do
            nc -z $MQTT_APP_NAME-$pod.$MQTT_BROKER_SERVICE.$NAMESPACE $MQTT_BROKER_PORT
            if [ $? != 0 ]; then
                all_ready=0
                break
            fi
        done
        if [ $all_ready = 1 ]; then
            break
        else
            echo "Waiting for all pods of mqtt application to be ready..."
            sleep 5s
        fi
    done
    echo "Create mqtt topic in kafka with replication factor $KAFKA_BROKER_REPLICAS..."
    kafka-topics --create --topic $MQTT_KAFKA_TOPIC --partitions $((KAFKA_BROKER_REPLICAS*5)) --replication-factor $KAFKA_BROKER_REPLICAS --if-not-exists --zookeeper $ZOOKEEPER_SERVER
    if [ $? != 0 ]; then
        exit 1
    fi
    
    echo "Create source connector json file..."
    for pod in $(seq 0 $((MQTT_BROKER_REPLICAS-1)))
    do
        echo "{\"name\":\"$MQTT_APP_NAME-source-$pod\",\"config\":{\"connector.class\":\"io.confluent.connect.mqtt.MqttSourceConnector\",\"tasks.max\":$KAFKA_BROKER_REPLICAS,\"mqtt.server.uri\": \"tcp://$MQTT_APP_NAME-$pod.$MQTT_BROKER_SERVICE.$NAMESPACE:$MQTT_BROKER_PORT\",\"mqtt.topics\": \"$MQTT_SOURCE_TOPICS\",\"kafka.topic\": \"$MQTT_KAFKA_TOPIC\",\"value.converter\": \"org.apache.kafka.connect.converters.ByteArrayConverter\",\"confluent.topic.bootstrap.servers\": \"$KAFKA_SERVER.$NAMESPACE:$KAFKA_SERVER_PORT\",\"confluent.topic.replication.factor\":$KAFKA_BROKER_REPLICAS}}" > mqtt-source.json
        cat mqtt-source.json
        curl -d @mqtt-source.json -H "Content-Type: application/json" -X POST http://kafka-connect-server.$NAMESPACE:8083/connectors
    done
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-mqtt-connector
  namespace: titangrm-iot
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: create-mqtt-connector
    spec:
      containers:
      - name: kafka-broker
        image: titangrm/kafka:2.1.0
        env:
        - name: MQTT_BROKER_REPLICAS
          value: "3"
        - name: KAFKA_SERVER
          value: "kafka-server"
        - name: KAFKA_SERVER_PORT
          value: "9092"
        - name: KAFKA_BROKER_REPLICAS
          value: "3"
        - name: MQTT_APP_NAME
          value: "mqtt"
        - name: MQTT_KAFKA_TOPIC
          value: "mqtt-data"
        - name: MQTT_SOURCE_TOPICS
          value: "mqtt-data"
        - name: ZOOKEEPER_SERVER
          value: "zookeeper-server:2181/iot-default"
        command: ['/bin/bash', '/kafka-connect/create-mqtt-connector.sh']
        volumeMounts:
        - name: configmap
          mountPath: /kafka-connect
      volumes:
      - name: configmap
        configMap:
          name: kafka-mqtt-connector
      restartPolicy: Never
